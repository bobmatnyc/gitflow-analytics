name: Release and Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.2.3, etc.

permissions:
  contents: read
  id-token: write  # Required for trusted publishing to PyPI

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper version detection
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'  # Use stable Python version for releases
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Verify version matches tag
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        PACKAGE_VERSION=$(python -c "from src.gitflow_analytics._version import __version__; print(__version__)")
        echo "Tag version: $TAG_VERSION"
        echo "Package version: $PACKAGE_VERSION"
        if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
          echo "Version mismatch: tag $TAG_VERSION != package $PACKAGE_VERSION"
          exit 1
        fi
    
    - name: Run tests before release
      run: |
        pip install -e ".[dev]"
        python -m pytest tests/ -v --tb=short
        
    - name: Run linting checks
      run: |
        ruff check src/
        black --check src/
        mypy src/
    
    - name: Build package
      run: |
        python -m build
        
    - name: Check build artifacts
      run: |
        ls -la dist/
        python -m twine check dist/*
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Uses trusted publishing (OIDC) - no API token needed
        # Alternative: use password: ${{ secrets.PYPI_API_TOKEN }}
        print-hash: true
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        
    - name: Create GitHub Release Assets
      run: |
        gh release upload ${{ github.ref_name }} dist/*.whl dist/*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}